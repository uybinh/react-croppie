{"version":3,"sources":["components/ImageLoader/ImageLoader.module.css","hoc/Aux.js","components/Croppie/Croppie.js","components/ImageLoader/ImageLoader.js","App.js","serviceWorker.js","index.js","components/Croppie/Croppie.module.css"],"names":["module","exports","ImageLoader","aux","props","children","DEFAULT_OPTS","boundary","width","height","showZoomer","mouseWheelZoom","CroppieComp","state","result","type","crop","_this","croppie","format","quality","then","imgCode","setState","optionSelectHandler","e","target","value","viewport","this","opts","Object","assign","Croppie","croppieCont","bind","url","imgUrl","createCroppieInstance","prevProps","prevState","destroy","_this2","react_default","a","createElement","className","classes","Preview","src","alt","Aux","Controls","RadioGroup","name","onChange","checked","onClick","id","ref","el","Component","imageLoader","onchange","htmlFor","App","file","fileHandler","URL","createObjectURL","files","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,YAAA,0OCCHC,EAFH,SAAAC,GAAK,OAAIA,EAAMC,UCMrBC,EAAe,CACnBC,SAAU,CAAEC,MAAO,IAAKC,OAAQ,KAChCC,YAAY,EACZC,eAAgB,QAqFHC,6MAjFbC,MAAQ,CACNC,OAAQ,KACRC,KAAM,YAwBRC,KAAO,WAMLC,EAAKC,QAAQJ,OALD,CACVC,KAAM,SACNI,OAAQ,MACRC,QAAS,IAEcC,KAAK,SAAAC,GAC5BL,EAAKM,SAAS,CAAET,OAAQQ,SAI5BE,oBAAsB,SAAAC,GACpBR,EAAKM,SAAS,CAAER,KAAMU,EAAEC,OAAOC,gGAhC/B,IAAMC,EAAW,CACfA,SAAU,CAAEpB,MAAO,IAAKC,OAAQ,IAAKM,KAAMc,KAAKhB,MAAME,OAElDe,EAAOC,OAAOC,OAAO,GAAI1B,EAAcsB,EAAUC,KAAKzB,MAAM0B,MAClED,KAAKX,QAAU,IAAIe,UAAQJ,KAAKK,YAAaJ,GAC7CD,KAAKX,QAAQiB,KAAK,CAChBC,IAAKP,KAAKzB,MAAMiC,qDAKlBR,KAAKS,mEAGYC,EAAWC,GACxBA,EAAUzB,OAASc,KAAKhB,MAAME,OAClCc,KAAKX,QAAQuB,UACbZ,KAAKS,0DAkBE,IAAAI,EAAAb,KACDf,EACJ6B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQC,SACtBL,EAAAC,EAAAC,cAAA,OAAKI,IAAKpB,KAAKhB,MAAMC,OAAQoC,IAAI,YAGrC,OACEP,EAAAC,EAAAC,cAACM,EAAD,KACER,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQK,UACtBT,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQM,YACtBV,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SACES,KAAK,OACLvC,KAAK,QACLY,MAAM,SACN4B,SAAU1B,KAAKL,oBACfgC,QAA6B,WAApB3B,KAAKhB,MAAME,QAGxB4B,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SACES,KAAK,OACLvC,KAAK,QACLY,MAAM,SACN4B,SAAU1B,KAAKL,oBACfgC,QAA6B,WAApB3B,KAAKhB,MAAME,SAI1B4B,EAAAC,EAAAC,cAAA,UAAQY,QAAS5B,KAAKb,MAAtB,gBAEF2B,EAAAC,EAAAC,cAAA,OAAKa,GAAG,OAAOC,IAAK,SAAAC,GAAE,OAAKlB,EAAKR,YAAc0B,KAC7C/B,KAAKhB,MAAMC,QAAUA,UA5EJ+C,8BCFXC,EAPK,SAAA1D,GAAK,OACvBuC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ7C,aACtByC,EAAAC,EAAAC,cAAA,SAAOa,GAAG,YAAY3C,KAAK,OAAOwC,SAAUnD,EAAM2D,WAClDpB,EAAAC,EAAAC,cAAA,SAAOmB,QAAQ,aAAf,qBCmBWC,6MApBbpD,MAAQ,CACNqD,KAAM,QAGRC,YAAc,SAAA1C,GACZR,EAAKM,SAAS,CACZ2C,KAAME,IAAIC,gBAAgB5C,EAAEC,OAAO4C,MAAM,+EAK3C,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC3C,EAAD,CAAa6D,SAAUlC,KAAKsC,cAC3BtC,KAAKhB,MAAMqD,MAAQvB,EAAAC,EAAAC,cAACZ,EAAD,CAASI,OAAQR,KAAKhB,MAAMqD,eAftCL,mBCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC,kCE9HnBrF,EAAAC,QAAA,CAAkBmD,SAAA,0BAAAC,WAAA,4BAAAL,QAAA","file":"static/js/main.e550a02e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageLoader\":\"ImageLoader_ImageLoader__3F7dU\"};","const aux = props => props.children\n\nexport default aux\n","import React, { Component } from \"react\"\nimport { Croppie } from \"croppie\"\nimport \"croppie/croppie.css\"\nimport classes from \"./Croppie.module.css\"\nimport Aux from \"../../hoc/Aux\"\n\nconst DEFAULT_OPTS = {\n  boundary: { width: 300, height: 300 },\n  showZoomer: true,\n  mouseWheelZoom: \"ctrl\"\n}\n\nclass CroppieComp extends Component {\n  state = {\n    result: null,\n    type: \"square\"\n  }\n\n  createCroppieInstance() {\n    const viewport = {\n      viewport: { width: 200, height: 200, type: this.state.type }\n    }\n    const opts = Object.assign({}, DEFAULT_OPTS, viewport, this.props.opts)\n    this.croppie = new Croppie(this.croppieCont, opts)\n    this.croppie.bind({\n      url: this.props.imgUrl\n    })\n  }\n\n  componentDidMount() {\n    this.createCroppieInstance()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.type === this.state.type) return\n    this.croppie.destroy()\n    this.createCroppieInstance()\n  }\n\n  crop = () => {\n    const opt = {\n      type: \"base64\",\n      format: \"png\",\n      quality: 1\n    }\n    this.croppie.result(opt).then(imgCode => {\n      this.setState({ result: imgCode })\n    })\n  }\n\n  optionSelectHandler = e => {\n    this.setState({ type: e.target.value })\n  }\n\n  render() {\n    const result = (\n      <div className={classes.Preview}>\n        <img src={this.state.result} alt=\"result\" />\n      </div>\n    )\n    return (\n      <Aux>\n        <div className={classes.Controls}>\n          <div className={classes.RadioGroup}>\n            <label>\n              Circle\n              <input\n                name=\"type\"\n                type=\"radio\"\n                value=\"circle\"\n                onChange={this.optionSelectHandler}\n                checked={this.state.type === \"circle\"}\n              />\n            </label>\n            <label>\n              Square\n              <input\n                name=\"type\"\n                type=\"radio\"\n                value=\"square\"\n                onChange={this.optionSelectHandler}\n                checked={this.state.type === \"square\"}\n              />\n            </label>\n          </div>\n          <button onClick={this.crop}>Show result</button>\n        </div>\n        <div id=\"demo\" ref={el => (this.croppieCont = el)} />\n        {this.state.result && result}\n      </Aux>\n    )\n  }\n}\n\nexport default CroppieComp\n","import React from \"react\"\nimport classes from \"./ImageLoader.module.css\"\n\nconst imageLoader = props => (\n  <div className={classes.ImageLoader}>\n    <input id=\"fileinput\" type=\"file\" onChange={props.onchange} />\n    <label htmlFor=\"fileinput\">Upload an image</label>\n  </div>\n)\n\nexport default imageLoader\n","import React, { Component } from \"react\"\nimport Croppie from \"./components/Croppie/Croppie\"\nimport ImageLoader from \"./components/ImageLoader/ImageLoader\"\n\nclass App extends Component {\n  state = {\n    file: null\n  }\n\n  fileHandler = e => {\n    this.setState({\n      file: URL.createObjectURL(e.target.files[0])\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ImageLoader onchange={this.fileHandler} />\n        {this.state.file && <Croppie imgUrl={this.state.file} />}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Croppie_Controls__3V0dn\",\"RadioGroup\":\"Croppie_RadioGroup__3Q9ab\",\"Preview\":\"Croppie_Preview__1XCUT\"};"],"sourceRoot":""}